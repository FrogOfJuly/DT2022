\import Utils
\import hw01 (fac)

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (l : List A) : List A \elim l
  | nil => nil {A}
  | :: a xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func foldr {A : \Type} {B : \Type} (f : A -> B -> B) (xs : List A) (ini : B) : B \elim xs
  | nil => ini
  | :: a xs => f a (foldr f xs ini)

\func sort {A : \Type} (cmp : A -> A -> Bool) (l : List A) : List A => flatten A (foldr {A} {Tree A} (insert A cmp) l Leaf)
  \where{
    \data Tree (A : \Type)
      | Leaf
      | Node (Tree A) A (Tree A)
    \func insert (A : \Type) (cmp : A -> A -> Bool) (x : A) (tree : Tree A) : Tree A \elim tree
      | Leaf => Node Leaf x Leaf
      | Node tree1 y tree2 => \case cmp x y \with{
        | true => Node tree1 y (insert A cmp x tree2)
        | false => Node (insert A cmp x tree1) y tree2
      }
    \func flatten (A : \Type) (tree : Tree A) : List A \elim tree
      | Leaf => nil
      | Node tree1 x tree2 => flatten A tree1 ++ (x :: nil) ++ flatten A tree2
  }


-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x, y, z
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x, y, z
  | true, true, true => idp
  | true, true, false => idp
  | true, false, true => idp
  | true, false, false => idp
  | false, true, true => idp
  | false, true, false => idp
  | false, false, true => idp
  | false, false, false => idp

-- 4. Докажите, что fac 3 равно 6.

\func facproof : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R  \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R

\func t4 {P Q R : \Type} (f : P -> Q -> R) (x : \Sigma P Q) : R \elim x
  | (p,q) => f p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)

\func t5 {P Q : \Type} (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => ( \lam p => (f (inl p)).2
                                                                                    , \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam x => h (3, x)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).

\func s3 {P Q : Nat -> \Type} (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) \elim g
  | (x,p) => (x, h x p)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.

\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty => \lam (x : P 3) => \case (h 3) \with {
  | inl a => absurd (a x)
  | inr b => b
}
