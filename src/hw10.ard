\import Function.Meta
\import Meta
\import Paths.Meta
\import lect07 \hiding (<=-refl, baz, isEven)
\import lect10
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam {x} {y} gfx=gfy => p $ q gfx=gfy

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam {x} {y} fx=fy => p $ pmap g fx=fy

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

--\data MultOf3Or5 (n : Nat)
--  | mod3alone (\Sigma (mod3 n = 0) (mod5 n /= 0))
--  | mod5alone (\Sigma (mod3 n /= 0) (mod5 n = 0))
--  | mod3and5 (\Sigma (mod3 n = 0) (mod5 n = 0))

\func isMultipleOf3Or5 (n : Nat) : \Type => T (mod5 n Eq.== 0 || mod3 n Eq.== 0)

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  unfold isMultipleOf3Or5 $ cases (mod5 n) \with {
    | 0 => Unit-isProp
    | suc x => cases (mod3 n) \with {
      | 0 => Unit-isProp
      | suc x1 => Empty-isProp
    }
  }

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {x} {y} p => sigmaEq (\lam n => isMultipleOf3Or5 n) x y p T-lem

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (\lam (x, eq) => (\lam y y' => sym (eq y) *> eq y', x),
   \lam (isprp, x) => (x, isprp x))

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  \let f => p Unit-isProp Unit-isProp \in \case f (Either.inl ()) (Either.inr ())

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n, m
  | 0, m => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam x y => \case x
  | suc n, suc m =>
    \lam x y => \case \elim x, \elim y \with {
      | s<=s x, s<=s y => pmap s<=s $ LessOrEq-isProp x y
    }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => {?}

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty => {?}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => p $ q (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A => {?}

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) => setLem Eq-in-or (Eq-in-or-isProp p q)
    (\lam a => \case \elim a \with {
      | inl a => idp
      | inr b => idp
    })
    (\lam {a} {a'} o => \case \elim a, \elim a', \elim o \with {
      | inl a, inl a', a=a' => pmap inl a=a'
      | inr b, inr b', b=b' => pmap inr b=b'
    })
  \where {
    \func Eq-in-or {A B : \Type} (x y : Or A B) : \Type
      | inl a, inl a' => a = a'
      | inr b, inr b' => b = b'
      | inl a, inr b => Empty
      | inr b, inl a => Empty

    \func Eq-in-or-isProp {A B : \Type} (p : isSet A) (q : isSet B) (x y : Or A B): isProp (Eq-in-or x y) \elim x, y
      | inl a, inl a' => p a a'
      | inl a, inr b => Empty-isProp
      | inr b, inl a => Empty-isProp
      | inr b, inr b' => q b b'
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) =>
  setLem {\Pi (x : A) -> B x} Eq-in-pi (Eq-in-pi-isProp p)
    (\lam f a => idp)
    $ \lam {a} {a'} p1 => ext (\lam a => p1 a)
  \where {
    \func Eq-in-pi {A :\Type} {B : A -> \Type} (f g : \Pi (x : A) -> B x): \Type =>
      \Pi (x : A) -> f x = g x

    \func Eq-in-pi-isProp {A :\Type} {B : A -> \Type} (p : \Pi (x : A) -> isSet (B x)) (f g : \Pi (x : A) -> B x) : isProp (Eq-in-pi f g) =>
      \lam sp1 sp2 => ext (\lam a =>
          \let prop => p a (f a) (g a)
          \in prop (sp1 a) (sp2 a))
  }

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A) => {?}

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n =>
  {?}