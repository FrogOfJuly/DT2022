\import Function.Meta
\import Logic (propExt)
\import Meta
\import Paths.Meta
\import Utils
\import lect12 \hiding (sym)
\import lect13

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s =>
  setExt $ \lam a =>
               (\lam p => \case add-univ p \with{
                 | Or.byLeft a' => rewrite a' add-head
                 | Or.byRight b' => b'
               }, add-tail)

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s) =>
  setExt $ \lam a => (add-swap-lemma a x y s, add-swap-lemma a y x s)
  \where {
    \lemma add-swap-lemma {S : SetSpec} (a : S.A) (x y : S.A) (s : S.S) : S.isElem a (S.add x (S.add y s)) -> S.isElem a (S.add y (S.add x s)) =>
      \lam iselem => \case add-univ iselem \with {
        | byLeft a1 => rewrite a1 $ add-tail add-head
        | byRight b => \case add-univ b \with {
          | byLeft a=y => rewrite a=y add-head
          | byRight a-iselem-s => add-tail $ add-tail a-iselem-s
        }
      }
  }

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop) => \new SetSpec {
  | empty => \lam a => Empty
  | add => \lam a s a' => Or (a = a') (s a')
  | isElem => \lam a s => s a
  | setExt => \lam s-ext => ext $ \lam a => \let | m => s-ext a \in propExt m.1 m.2
  | add-head => byLeft idp
  | add-tail => byRight
  | empty-univ => \lam i => absurd i
  | add-univ => \lam x=a|sa => \case x=a|sa \with {
    | byLeft a => byLeft (sym a)
    | byRight b => byRight b
  }
}

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f) =>
  (\lam s a => isElem a s,
   \lam s s' p => setExt $ subsets-largest-lemma s s' p)
  \where {
    \lemma subsets-largest-lemma {S : SetSpec} (s : S.S) (s' : S.S) (p : (\lam a => isElem a s) = (\lam a => isElem a s')): \Pi (a : S.A) -> S.isElem a s <-> S.isElem a s' =>
      \lam a =>
          \let
            | meh => pmap (\lam eq => eq a) p
          \in
            (\lam a-in-s => rewrite (sym meh) a-in-s,
             \lam a-in-s' => rewrite meh a-in-s')
  }

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

\func isEmptySet {S : FinSetSpec} (x : S) : Bool =>
  \let
    | q => rewrite listSet=Set (\lam ys => isEmptyListSet ys)
  \in q x

\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool => quotientEx empty isEmptyListSet-lemma x
  \where {
    \func empty {A : \Set} (a : List A) : Bool => \case a \with {
      | nil => true
      | _ :: _ => false
    }

    \func isEmptyListSet-lemma {A : \Set} {a a' : List A} (eq : EqList a a') :  empty a = empty a' \elim a, a', eq
      | a :: _, nil, eq => \case (eq a).1 (here idp)
      | nil, a :: _, eq => \case (eq a).2 (here idp)
      | nil, nil, _ => unfold empty idp
      | _ :: _, _ :: _, _ => unfold empty idp
  }

-- 5. Определите функцию union {A : \Set} : S -> S -> S для произвольного S (удовлетворяющего FinSetSpec) и для ListSet.

-- 6. Определите функцию intersection {A : DecSet} : S -> S -> S для произвольного S (удовлетворяющего FinSetSpec) и для ListSet.

-- 7. Мы не можем определить функция size в общем случае, но мы можем определить предикат S -> Nat -> \Prop, соответствующий \lam xs n => size xs <= n.
--    Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо и S -- конечно.

-- Optional
-- 8. Определите предикат isFin : \Type -> \Prop так, чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P a))) удовлетворяло FinSetSpec, определите этот инстанс.

-- Optional
-- 9. Определите NubListSet и инстанс FinSetSpec для него.
