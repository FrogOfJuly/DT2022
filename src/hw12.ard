\import Function.Meta
\import Logic (inP)
\import Meta
\import Paths.Meta
\import Utils
\import lect12 \hiding (sym)

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | pos (suc n) => pos (suc n)
  | neg n => neg (suc n)
  | 0 => neg 1

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim x, y
  | neg 0, neg 0 => pos 0
  | pos 0, pos 0 => pos 0
  | neg 0, pos 0 => pos 0
  | pos 0, neg 0 => pos 0
  | neg (suc x), pos 0 => neg (suc x)
  | pos (suc x), pos 0 => pos (suc x)
  | neg (suc x), neg 0 => neg (suc x)
  | pos (suc x), neg 0 => pos (suc x)
  | pos 0, neg (suc x) => neg (suc x)
  | pos 0, pos (suc x) => pos (suc x)
  | neg 0, neg (suc x) => neg (suc x)
  | neg 0, pos (suc x) => pos (suc x)

  | pos (suc x), neg (suc y) => pos x + neg y
  | neg (suc x), pos (suc y) => neg x + pos y

  | pos (suc x), pos (suc y) => pos $ x Nat.+ y Nat.+ 2
  | neg (suc x), neg (suc y) => neg $ x Nat.+ y Nat.+ 2

\func \infixl 7 * (x y : Int) : Int \elim x, y
  | pos n, pos m => pos $ n Nat.* m
  | pos n, neg m => neg $ n Nat.* m
  | neg (suc n), pos m => neg $ suc n Nat.* m
  | neg (suc n), neg m => pos $ suc n Nat.* m


-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | zero
  | n*2 BinNat \with {
    | zero => zero
  }
  | n*2+1 BinNat

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred =>
  \lam b => inP $ \case \elim b \with {
    | 0 => (0, idp)
    | suc n => (suc (suc n), idp)
  }

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \case (p 0) \with {
  | inP (a, ())
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f) =>
  \lam z => \case q z \with {
    | inP (y, gy=z) => \case p y \with {
      | inP (x, fx=y) => inP $ unfold o (x, pmap g fx=y *> gy=z)
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g =>
  \lam z => \case p z \with {
    | inP (x, gfx=z) => inP (f x, gfx=z)
  }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data Set (A : \Set) : \Set

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f) =>
  (\lam a x => x = a, \lam {x} {y} p => rewrite (sym $ pmap (\lam f => f x) p) idp)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty => {?}

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
